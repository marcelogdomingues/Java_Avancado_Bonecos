/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.bonecos.kusco.j2ee.session;

import com.bonecos.kusco.factory.*;
import com.bonecos.kusco.dao.*;
import com.bonecos.kusco.dto.*;
import com.bonecos.kusco.exceptions.*;
import java.rmi.RemoteException;
import java.math.*;
import java.util.Date;
import javax.ejb.*;

public class ClientesbonecosSessionBean implements SessionBean
{
	protected ClientesbonecosDao daoImpl = createDao();

	/** 
	 * Inserts a new row in the CLIENTESBONECOS table.
	 */
	public ClientesbonecosPk insert(Clientesbonecos dto) throws ClientesbonecosDaoException
	{
		try {
			return daoImpl.insert(dto);
		}
		catch (ClientesbonecosDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new ClientesbonecosDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Updates a single row in the CLIENTESBONECOS table.
	 */
	public void update(ClientesbonecosPk pk, Clientesbonecos dto) throws ClientesbonecosDaoException
	{
		try {
			daoImpl.update(pk, dto);
		}
		catch (ClientesbonecosDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new ClientesbonecosDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Deletes a single row in the CLIENTESBONECOS table.
	 */
	public void delete(ClientesbonecosPk pk) throws ClientesbonecosDaoException
	{
		try {
			daoImpl.delete(pk);
		}
		catch (ClientesbonecosDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new ClientesbonecosDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Returns the rows from the CLIENTESBONECOS table that matches the specified primary-key value.
	 */
	public Clientesbonecos findByPrimaryKey(ClientesbonecosPk pk) throws ClientesbonecosDaoException
	{
		return findByPrimaryKey( pk.getIdCliente() );
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param idCliente
	 * @throws ClientesbonecosDaoException
	 * @return Clientesbonecos
	 */
	public Clientesbonecos findByPrimaryKey(long idCliente) throws ClientesbonecosDaoException
	{
		try {
			return daoImpl.findByPrimaryKey(idCliente);
		}
		catch (ClientesbonecosDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new ClientesbonecosDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findAll'
	 * 
	 * @throws ClientesbonecosDaoException
	 * @return Clientesbonecos[]
	 */
	public Clientesbonecos[] findAll() throws ClientesbonecosDaoException
	{
		try {
			return daoImpl.findAll();
		}
		catch (ClientesbonecosDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new ClientesbonecosDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereIdClienteEquals'
	 * 
	 * @param idCliente
	 * @throws ClientesbonecosDaoException
	 * @return Clientesbonecos[]
	 */
	public Clientesbonecos[] findWhereIdClienteEquals(long idCliente) throws ClientesbonecosDaoException
	{
		try {
			return daoImpl.findWhereIdClienteEquals(idCliente);
		}
		catch (ClientesbonecosDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new ClientesbonecosDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereNumeroCcEquals'
	 * 
	 * @param numeroCc
	 * @throws ClientesbonecosDaoException
	 * @return Clientesbonecos[]
	 */
	public Clientesbonecos[] findWhereNumeroCcEquals(long numeroCc) throws ClientesbonecosDaoException
	{
		try {
			return daoImpl.findWhereNumeroCcEquals(numeroCc);
		}
		catch (ClientesbonecosDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new ClientesbonecosDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereNomeEquals'
	 * 
	 * @param nome
	 * @throws ClientesbonecosDaoException
	 * @return Clientesbonecos[]
	 */
	public Clientesbonecos[] findWhereNomeEquals(String nome) throws ClientesbonecosDaoException
	{
		try {
			return daoImpl.findWhereNomeEquals(nome);
		}
		catch (ClientesbonecosDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new ClientesbonecosDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereMoradaEquals'
	 * 
	 * @param morada
	 * @throws ClientesbonecosDaoException
	 * @return Clientesbonecos[]
	 */
	public Clientesbonecos[] findWhereMoradaEquals(String morada) throws ClientesbonecosDaoException
	{
		try {
			return daoImpl.findWhereMoradaEquals(morada);
		}
		catch (ClientesbonecosDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new ClientesbonecosDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereDataNascimentoEquals'
	 * 
	 * @param dataNascimento
	 * @throws ClientesbonecosDaoException
	 * @return Clientesbonecos[]
	 */
	public Clientesbonecos[] findWhereDataNascimentoEquals(Date dataNascimento) throws ClientesbonecosDaoException
	{
		try {
			return daoImpl.findWhereDataNascimentoEquals(dataNascimento);
		}
		catch (ClientesbonecosDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new ClientesbonecosDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereDataInsercaoEquals'
	 * 
	 * @param dataInsercao
	 * @throws ClientesbonecosDaoException
	 * @return Clientesbonecos[]
	 */
	public Clientesbonecos[] findWhereDataInsercaoEquals(Date dataInsercao) throws ClientesbonecosDaoException
	{
		try {
			return daoImpl.findWhereDataInsercaoEquals(dataInsercao);
		}
		catch (ClientesbonecosDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new ClientesbonecosDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereGeneroEquals'
	 * 
	 * @param genero
	 * @throws ClientesbonecosDaoException
	 * @return Clientesbonecos[]
	 */
	public Clientesbonecos[] findWhereGeneroEquals(String genero) throws ClientesbonecosDaoException
	{
		try {
			return daoImpl.findWhereGeneroEquals(genero);
		}
		catch (ClientesbonecosDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new ClientesbonecosDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicSelect'
	 * 
	 * @param sql
	 * @param arg
	 * @throws ClientesbonecosDaoException
	 * @return Clientesbonecos[]
	 */
	public Clientesbonecos[] findByDynamicSelect(String sql, Object[] arg) throws ClientesbonecosDaoException
	{
		try {
			return daoImpl.findByDynamicSelect(sql, arg);
		}
		catch (ClientesbonecosDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new ClientesbonecosDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicWhere'
	 * 
	 * @param sql
	 * @param arg
	 * @throws ClientesbonecosDaoException
	 * @return Clientesbonecos[]
	 */
	public Clientesbonecos[] findByDynamicWhere(String sql, Object[] arg) throws ClientesbonecosDaoException
	{
		try {
			return daoImpl.findByDynamicWhere(sql, arg);
		}
		catch (ClientesbonecosDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new ClientesbonecosDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'ejbActivate'
	 * 
	 */
	public void ejbActivate()
	{
	}

	/**
	 * Method 'ejbPassivate'
	 * 
	 */
	public void ejbPassivate()
	{
	}

	/**
	 * Method 'ejbCreate'
	 * 
	 */
	public void ejbCreate()
	{
	}

	/**
	 * Method 'ejbRemove'
	 * 
	 */
	public void ejbRemove()
	{
	}

	/**
	 * Method 'setSessionContext'
	 * 
	 * @param ctx
	 */
	public void setSessionContext(SessionContext ctx)
	{
	}

	/**
	 * Method 'unsetSessionContext'
	 * 
	 */
	public void unsetSessionContext()
	{
	}

	/**
	 * Method 'createDao'
	 * 
	 * @return ClientesbonecosDao
	 */
	protected ClientesbonecosDao createDao()
	{
		return ClientesbonecosDaoFactory.create();
	}

}
