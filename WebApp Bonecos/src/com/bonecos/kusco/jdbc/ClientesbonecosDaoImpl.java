/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.bonecos.kusco.jdbc;

import com.bonecos.kusco.dao.*;
import com.bonecos.kusco.factory.*;
import java.util.Date;
import com.bonecos.kusco.dto.*;
import com.bonecos.kusco.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ClientesbonecosDaoImpl extends AbstractDAO implements ClientesbonecosDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ID_CLIENTE, NUMERO_CC, NOME, MORADA, DATA_NASCIMENTO, DATA_INSERCAO, GENERO FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ID_CLIENTE, NUMERO_CC, NOME, MORADA, DATA_NASCIMENTO, DATA_INSERCAO, GENERO ) VALUES ( ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ID_CLIENTE = ?, NUMERO_CC = ?, NOME = ?, MORADA = ?, DATA_NASCIMENTO = ?, DATA_INSERCAO = ?, GENERO = ? WHERE ID_CLIENTE = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ID_CLIENTE = ?";

	/** 
	 * Index of column ID_CLIENTE
	 */
	protected static final int COLUMN_ID_CLIENTE = 1;

	/** 
	 * Index of column NUMERO_CC
	 */
	protected static final int COLUMN_NUMERO_CC = 2;

	/** 
	 * Index of column NOME
	 */
	protected static final int COLUMN_NOME = 3;

	/** 
	 * Index of column MORADA
	 */
	protected static final int COLUMN_MORADA = 4;

	/** 
	 * Index of column DATA_NASCIMENTO
	 */
	protected static final int COLUMN_DATA_NASCIMENTO = 5;

	/** 
	 * Index of column DATA_INSERCAO
	 */
	protected static final int COLUMN_DATA_INSERCAO = 6;

	/** 
	 * Index of column GENERO
	 */
	protected static final int COLUMN_GENERO = 7;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 7;

	/** 
	 * Index of primary-key column ID_CLIENTE
	 */
	protected static final int PK_COLUMN_ID_CLIENTE = 1;

	/** 
	 * Inserts a new row in the CLIENTESBONECOS table.
	 */
	public ClientesbonecosPk insert(Clientesbonecos dto) throws ClientesbonecosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( SQL_INSERT );
			int index = 1;
			stmt.setLong( index++, dto.getIdCliente() );
			stmt.setLong( index++, dto.getNumeroCc() );
			stmt.setString( index++, dto.getNome() );
			stmt.setString( index++, dto.getMorada() );
			stmt.setTimestamp(index++, dto.getDataNascimento()==null ? null : new java.sql.Timestamp( dto.getDataNascimento().getTime() ) );
			stmt.setTimestamp(index++, dto.getDataInsercao()==null ? null : new java.sql.Timestamp( dto.getDataInsercao().getTime() ) );
			stmt.setString( index++, dto.getGenero() );
			System.out.println( "Executing " + SQL_INSERT + " with DTO: " + dto );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
			reset(dto);
			return dto.createPk();
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClientesbonecosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the CLIENTESBONECOS table.
	 */
	public void update(ClientesbonecosPk pk, Clientesbonecos dto) throws ClientesbonecosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_UPDATE + " with DTO: " + dto );
			stmt = conn.prepareStatement( SQL_UPDATE );
			int index=1;
			stmt.setLong( index++, dto.getIdCliente() );
			stmt.setLong( index++, dto.getNumeroCc() );
			stmt.setString( index++, dto.getNome() );
			stmt.setString( index++, dto.getMorada() );
			stmt.setTimestamp(index++, dto.getDataNascimento()==null ? null : new java.sql.Timestamp( dto.getDataNascimento().getTime() ) );
			stmt.setTimestamp(index++, dto.getDataInsercao()==null ? null : new java.sql.Timestamp( dto.getDataInsercao().getTime() ) );
			stmt.setString( index++, dto.getGenero() );
			stmt.setLong( 8, pk.getIdCliente() );
			int rows = stmt.executeUpdate();
			reset(dto);
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClientesbonecosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the CLIENTESBONECOS table.
	 */
	public void delete(ClientesbonecosPk pk) throws ClientesbonecosDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			System.out.println( "Executing " + SQL_DELETE + " with PK: " + pk );
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getIdCliente() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			System.out.println( rows + " rows affected (" + (t2-t1) + " ms)" );
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClientesbonecosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the CLIENTESBONECOS table that matches the specified primary-key value.
	 */
	public Clientesbonecos findByPrimaryKey(ClientesbonecosPk pk) throws ClientesbonecosDaoException
	{
		return findByPrimaryKey( pk.getIdCliente() );
	}

	/** 
	 * Returns all rows from the CLIENTESBONECOS table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public Clientesbonecos findByPrimaryKey(long idCliente) throws ClientesbonecosDaoException
	{
		Clientesbonecos ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ID_CLIENTE = ?", new Object[] {  new Long(idCliente) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the CLIENTESBONECOS table that match the criteria ''.
	 */
	public Clientesbonecos[] findAll() throws ClientesbonecosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ID_CLIENTE", null );
	}

	/** 
	 * Returns all rows from the CLIENTESBONECOS table that match the criteria 'ID_CLIENTE = :idCliente'.
	 */
	public Clientesbonecos[] findWhereIdClienteEquals(long idCliente) throws ClientesbonecosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ID_CLIENTE = ? ORDER BY ID_CLIENTE", new Object[] {  new Long(idCliente) } );
	}

	/** 
	 * Returns all rows from the CLIENTESBONECOS table that match the criteria 'NUMERO_CC = :numeroCc'.
	 */
	public Clientesbonecos[] findWhereNumeroCcEquals(long numeroCc) throws ClientesbonecosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NUMERO_CC = ? ORDER BY NUMERO_CC", new Object[] {  new Long(numeroCc) } );
	}

	/** 
	 * Returns all rows from the CLIENTESBONECOS table that match the criteria 'NOME = :nome'.
	 */
	public Clientesbonecos[] findWhereNomeEquals(String nome) throws ClientesbonecosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NOME = ? ORDER BY NOME", new Object[] { nome } );
	}

	/** 
	 * Returns all rows from the CLIENTESBONECOS table that match the criteria 'MORADA = :morada'.
	 */
	public Clientesbonecos[] findWhereMoradaEquals(String morada) throws ClientesbonecosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MORADA = ? ORDER BY MORADA", new Object[] { morada } );
	}

	/** 
	 * Returns all rows from the CLIENTESBONECOS table that match the criteria 'DATA_NASCIMENTO = :dataNascimento'.
	 */
	public Clientesbonecos[] findWhereDataNascimentoEquals(Date dataNascimento) throws ClientesbonecosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DATA_NASCIMENTO = ? ORDER BY DATA_NASCIMENTO", new Object[] { dataNascimento==null ? null : new java.sql.Timestamp( dataNascimento.getTime() ) } );
	}

	/** 
	 * Returns all rows from the CLIENTESBONECOS table that match the criteria 'DATA_INSERCAO = :dataInsercao'.
	 */
	public Clientesbonecos[] findWhereDataInsercaoEquals(Date dataInsercao) throws ClientesbonecosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DATA_INSERCAO = ? ORDER BY DATA_INSERCAO", new Object[] { dataInsercao==null ? null : new java.sql.Timestamp( dataInsercao.getTime() ) } );
	}

	/** 
	 * Returns all rows from the CLIENTESBONECOS table that match the criteria 'GENERO = :genero'.
	 */
	public Clientesbonecos[] findWhereGeneroEquals(String genero) throws ClientesbonecosDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GENERO = ? ORDER BY GENERO", new Object[] { genero } );
	}

	/**
	 * Method 'ClientesbonecosDaoImpl'
	 * 
	 */
	public ClientesbonecosDaoImpl()
	{
	}

	/**
	 * Method 'ClientesbonecosDaoImpl'
	 * 
	 * @param userConn
	 */
	public ClientesbonecosDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "U3258.CLIENTESBONECOS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Clientesbonecos fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Clientesbonecos dto = new Clientesbonecos();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Clientesbonecos[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Clientesbonecos dto = new Clientesbonecos();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Clientesbonecos ret[] = new Clientesbonecos[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Clientesbonecos dto, ResultSet rs) throws SQLException
	{
		dto.setIdCliente( rs.getLong( COLUMN_ID_CLIENTE ) );
		dto.setNumeroCc( rs.getLong( COLUMN_NUMERO_CC ) );
		dto.setNome( rs.getString( COLUMN_NOME ) );
		dto.setMorada( rs.getString( COLUMN_MORADA ) );
		dto.setDataNascimento( rs.getTimestamp(COLUMN_DATA_NASCIMENTO ) );
		dto.setDataInsercao( rs.getTimestamp(COLUMN_DATA_INSERCAO ) );
		dto.setGenero( rs.getString( COLUMN_GENERO ) );
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Clientesbonecos dto)
	{
	}

	/** 
	 * Returns all rows from the CLIENTESBONECOS table that match the specified arbitrary SQL statement
	 */
	public Clientesbonecos[] findByDynamicSelect(String sql, Object[] sqlParams) throws ClientesbonecosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClientesbonecosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the CLIENTESBONECOS table that match the specified arbitrary SQL statement
	 */
	public Clientesbonecos[] findByDynamicWhere(String sql, Object[] sqlParams) throws ClientesbonecosDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new ClientesbonecosDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
